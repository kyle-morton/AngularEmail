-uses the single page application idealogy (0 page refreshes)
	the html needed is injected into the ng-view element

-angular.module('myApp', []) -> creates new module (NAMESPACE) called 'myApp' and returns
								it so you can assign it vars, functions
							 -> [] is used to path names of other modules as dependencies
							 -> with the array arg, the function becomes a getter for 'myApp'
							 
-routing -> use $routeProvider to inject the correct html when certain route reached
		    EX. when at /inbox, inject inbox.html which inits it's controller
			
$routeProvider is a seperate library from core angular, must be included in project file
***$routeProvider version should MATCH your angular version

-once $routeProvided included, we can use ngRoute and pass as dependency in our module!
 	EX. var app = angular.module('app', [
								'ngRoute'
								]);
								
-you can dynamically assign controllers to html elements

**modules have a .config() function that is run before most other function callbacks.
	-This is where we can config the routes, set up controllers, etc!
	
	//app.config(function() {/*....*/});								
	
	
--REM: good controller will have as little logic in it as possible.
--Used for binding view/model and small helper functions not needed elsewhere

Factory---
-commonly used to communicate with server-side APIs
-create reusable features and code blocks througout app
*API comm and modal storage/updates!

-create using app.factory (REM: factory creates an object that has the useful functions in it)
*GOOD IDEA -> use exports objects to store vars, functions that you actually want returned! 
REM: scoping can be confusing to defug if not explicit

app.factory('InboxFactory', function InboxFactory ($http) {
   var exports = {};

   exports.getMessages = function () {
      return $http.get('json/emails.json')
         .error(function (data) {
            console.log('There was an error!', data);
      });
   };

   return exports;
});

-notice how the return from $http.get() has function call .error()
-this is using the Promise API -> no object at time of call, but 
-PROMISED an object on return. act accordingly.


Promises 
- used heavily in angular, especially for things that take time (HTTP Requests for ex)
- use $q ($http is based off $q)
	- create the promise and pass it 2 callback functions for when:
		1) promise returned as expected (success)
		2) not returned as expected (error)
	ex) var deferred = $q.defer();
		deferred.promise.then(
			function whenThingsGoSunny(){}, //success
			function whenThingsDontGoSoSunny(){} //failure
		)
	
-$http does something similar with success, error functions on ajax requests
	$http({method: 'GET', url: '/someUrl'})
	.success(function(data, status, headers, config) {
		// this callback will be called asynchronously
		// when the response is available
	})
	.error(function(data, status, headers, config) {
		// called asynchronously if an error occurs
		// or server returns response with an error status.
	});

-REM: {{ }} can house not only angular ctrl values, but also JS expressions as well
EX) 
<!-- currency filter applied to a multiplication of 2 numbers -->
<div class="total-info">{{ cost * quantity | currency }}</div>

Directives (used as HTML extensions)
*You can create custom directives (html tags) and inject html, ctlrs, etc into them

ex) HTML (the directive will injected into my-custom-element)
<div id="someview">
   {{ data.scopePropertyAsUsual }}
   <my-custom-element></my-custom-element>
</div>

ex) Angular Backend (the name here is camelCased as myCustomElement, this is angular convention)
app.directive('myCustomElement', function myCustomElement() {
   return {
      restrict: 'EA',
      replace: true, //replaces the root element of directive (div id=someview)
      scope: true, //true inherits the parent scope, keeps siblings seperated
      template: [ //creates the html injected into directive
         "<div>",
         "	<h1>My Custom Element's Heading</h1>",
         "	<p>Some content here!</p>",
         "	<pre>{{ ctrl.expression | json }}</pre>,"
         "</div>"
      ].join(""),
      controllerAs: 'ctrl', //normal alias
      controller: function ($scope) { //controller to use
         this.expression = {
            property: "Example"
         }
      },
      link: function (scope, element, attrs) {} //non-ang init
   }
});

Built-In Directives
-these angular directives will evaluate based on data in them
ng-show -> only appear if true
ng-repeat -> foreach loop
ex)
<ul>
   <li ng-repeat="item in items">
      {{ item.name }}
   </li>
</ul>
//<li ng-repeat="message in inbox.messages | filter:{ from: inbox.search }">
//inbox.search comes from ng-model directive we attached to an input field

<input type="text" class="inbox__search" placeholder="Search"
   ng-model="inbox.search">
   
   
Cloaking (use ng-cloak on any element!)
-used on html element to tell Angular to hide it while it's still rendering.
****VERY USEFUL for when loading data from API on page load, gets rid of the flicker!!!
Recommmended Tip: angular places the ng:cloak style at the head of the file on load, but this
is after the js loads. They recommend doing this manually so it will be there from the start 

<head>
  <style>
    [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
      display: none !important;
    }
    </style>
</head>

<div ng-cloak>
      {{ someData }}
</div>

